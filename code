The project demonstrates the use of a wireless microcontroller known as "ESP-32". The system aims to enhance safety by providing accurate and timely
information on gas levels, facilitating proactive measures to prevent
potential hazards. Through this project, we strive to create a cost-effective
solution applicable to diverse environments, such as homes, industries, and
commercial spaces, addressing the critical need for detection of LPG
leakage in the environment

COMPONENTS USED:
• ESP 32 Module
• 16X2 LCD Display
• I2C Module
• MQ-2 Gas Sensor
• DC Fan
• Buzzer
• LED’s
• Servo Motor
• Breadboard
• Jumper Wires

WORKING:
• As the LPG starts to leak in a confined space, the MQ-2 gas
sensor detects it by taking analog values of the gas levels.
• Then this analog value is transferred to the our micro-controller
ESP 32 which reads this value and accordingly gives command to
the other components through code. If the gas level value is
greater than 50, the buzzer, red LED’s, exhaust fan and servo
motor start to work.
• While the gas level is less than 50, only green LED’s glow.
• The 16X2 LCD display is used to print the gas levels at each
step of the process whether the gas level is greater than 50 or not.
• All this information is also displayed on our smart-phone
through Blynk IOT app which runs through Wi-Fi. The Blynk
app notifies the user by displaying gas level along with a warning
sign.
  
GAS LEVEL DETECTION CODE:-
Downlaod and Install Arduino-IDE to run the code. You also need to visit the Blynk IOT website and register to get your auth token and template ID etc. 
Note: All the mentioned libraries should be pre-downloaded and installed under the Arduino-IDE.
#define BLYNK_TEMPLATE_ID "TMPL3TP1NGwtg"
#define BLYNK_TEMPLATE_NAME "GAS Level Monitoring System"
#include <LiquidCrystal_I2C.h>
#include <Wire.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <ESP32Servo.h>

Servo myservo;
int pos = 0;
int flag = 0;
#define sensor 34
#define buzzer 2
#define green 17
#define fan 5

//Initialize the LCD display
LiquidCrystal_I2C lcd(0x27, 16, 2);

BlynkTimer timer;

// Enter your Auth token
char auth[] = "ABC";

//Enter your WIFI SSID and password
char ssid[] = "ABC";
char pass[] = "ABC";
void setup() {
  // Debug console
  
  Serial.begin(115200);
  myservo.attach(4);    // attaches the servo motor on pin 4 to the servo object
  Blynk.begin(auth, ssid, pass, "blynk.cloud", 80);
  Wire.begin(21,23);
  lcd.init();
  lcd.backlight();
  pinMode(buzzer, OUTPUT);
  pinMode(green, OUTPUT);
  pinMode(fan, OUTPUT);
  lcd.setCursor(1, 0);
  lcd.print("System Loading");
  for (int a = 0; a <= 15; a++) {
    lcd.setCursor(a, 1);
    lcd.print(".");
    delay(200);
 }
  lcd.clear();
}

//Get the ultrasonic sensor values
void GASLevel() {
  int value = analogRead(sensor);
  value = map(value, 0, 4095, 0, 100);

  if (value >= 50) {
    if(flag == 0){
    for(pos=0;pos<=90;pos+=1){
    myservo.write(pos);
    delay(15);
    }
    flag = 1;
    }
    digitalWrite(buzzer, HIGH);
    digitalWrite(green, LOW);
    digitalWrite(fan, HIGH);
    lcd.setCursor(0, 1);
    lcd.print("     Warning!");
    WidgetLED LED(V1);
    LED.on();
  } else {
    digitalWrite(buzzer, LOW);
   digitalWrite(green, HIGH);
   digitalWrite(fan, LOW);
    lcd.setCursor(0, 1);
    lcd.print("      Normal   ");
    WidgetLED LED(V1);
    LED.off();
  }

  Blynk.virtualWrite(V0, value);
  Serial.println(value);
  lcd.setCursor(0, 0);
  lcd.print("GAS Level : ");
  lcd.print(value);
  lcd.print("%");
  lcd.print(" ");
}

void loop() {
  GASLevel();
  Blynk.run();//Run the Blynk library
  delay(200);
}



